//  int ledAbsoluteToRelativeLocation(int absoluteCoordinate)
//  {
//    // If we recieve led 4095 where is it relativley? 15-15-15.  led 64 = 0-4-0. 
//   return  null;
//  }
//  
//  int ledRelativeToAbsoluteLocatoin(int rowCoordinateY, int rowCoordinateZ)
//  {
//    //If we recieve row[0,0] what led is it?  -15 = 4096, 
//    return null;
//  }



      //aLedObject.setLedNumberInCube(); // set the led to 0 through 4096
//      debug( "Created led " + aLedObject.getLedNumberInCube()  );
      //debug ("Led Coordinate " + aLedObject.getLedNumberInCube() + " should equal " + (firstLedInRow + ledNumberInRow));


//      debug("arrayOfLeds[" + aLedObject.getLedNumberInCube()  + "] " + (firstLedInRow + ledNumberInRow) );
//      debug("length of array " + arrayOfLeds.length );
//      debug(" ");



########################################## 7/20  ###################################################

          /*Create an array list  ledArrayList[led000,led001] up to 16 characters in length
           Add 16 of those to the array list, (The array list won't allways start with led000. 
           
           If we are creating the row at y0 z0 then the array would include  [led0   -  led 15]
           If we are creating the row at y1 z0 then the array would include  [led16  -  led 31]
           If we are creating the row at y2 z0 then the array would include  [led32  -  led 47]
           If we are creating the row at y15 z0 then the array would include [led256 -  led 271]
           If we are creating the row at y0 z0 then the array would include  [led256 -  led 271]
           If we are creating the row at y0 z1 then the array would include  [led272 -  led 287]
           formula = (1 + y + z * 16 )* 16 -16  // Just so you know that took FOREVER!!! to figure out!!!!
           // the - 16 at the end is because we are using base 0
           
           15,0[ 240 - 255 ]16          
           
           4,0[  64 -  79 ]
           3,0[  48 -  63 ]4          3,1[ 304 - 319 ]19
           2,0[  32 -  47 ]3          2,1[ 288 - 303 ]18
           1,0[  16 -  31 ]2          1,1[ 272 - 287 ]17
           0,0[   0 -  15 ]1          0,1[ 256 - 271 ]16
           */
		   
		   
		   
        //TODO: This code is repeated but it gives it 'least scope' is there a better way to implement it?
        //int firstLedInRow = (1 + rowCoordinateY + rowCoordinateZ * 16 )* 16 -16;  // if we are on row 3 (base 0), of panel 0 (front panel) then the firstLedInRow = 48
        //int lastLedInRow  = (1 + rowCoordinateY + rowCoordinateZ * 16 )* 16; // if we are on row 3 (base 0), of panel 0 (front panel) then the lastLedInRow = 63
    
    
	
	        
        
              //  int ledLocationInRow = arrayOfLeds[ledInRowCounter].getLedNumberInRow(); //Takes a number such as 0 through 4096 and finds a row location such as 0 through 15
              // int ledLocationInRow   = this.anAraryOfRowLeds[ledInRowCounter].get; // line not needed because now the counter is for 0-16 instead of 0-4096
        
              //this.anAraryOfRowLeds[ledInRowCounter].displayOneLed(putLedsBetweenLines+ (horizontalLedStartLocation + (ledInRowCounter * pixelsBetweenDivisions)), 100);
              //debug ("Array Length "+ this.anAraryOfRowLeds[15]); // this is putting 14 of the 15 objects in then returning null pointer
        
		
		
		        
        
              /*
                      Broken Code
               
               int verticalBuffer = ((height/ 2 - 208) / 2 + ledSize/2); // = 32      debug("verticalBuffer "+verticalBuffer);
               
               int distanceBetweenLeds = (    width /  (xNumberOfLeds * (zNumberOfPanels/2) )    *  ledInRowCounter); debug("distance between leds "+distanceBetweenLeds);
               
               
               int compensateForDivideByO = width / (8 / (rowCoordinateY +1)); debug("dividby0 " + compensateForDivideByO);
               int placementLeftRight = (width / (8 / (rowCoordinateY +1) ) - compensateForDivideByO + ledSize/2 ); // must shift right then shift left or else divide by 0 error
               //           int placementLeftRight = (width / (8 / (rowCoordinateZ +1) )  + ledSize/2 ); // must shift right then shift left or else divide by 0 error
               debug("placementleftright " + placementLeftRight);
               
               int placementUpDown = (height /2  - verticalBuffer - (rowCoordinateY * ledSize) ); debug("placementupdown " + placementUpDown);
               
               
               //displayOneLed(x location, y location)
               //arrayOfLeds[ledInRowCounter].displayOneLed(  placementLeftRight  + ( distanceBetweenLeds) , placementUpDown  - verticalBuffer - rowCoordinateZ * ledInRowCounter );
               arrayOfLeds[ledInRowCounter].displayOneLed(  placementLeftRight  + ( distanceBetweenLeds) , placementUpDown  - rowCoordinateZ * ledInRowCounter );
               //  debug("Drawing led " + ledInRowCounter);
               
               */
			   
			   
			   
			             
                    // TODO: This line is giveing out of bounds exception. 
                    //        LedObject aLedObject4096 = new LedObject(); // Create led object ( (0-4095), 255=black, 0 = brightness, ledsize=10)
                    //                  aLedObject4096.setLedNumberInCube(ledNumberInRowCounter +  firstLedInRow);   //TODO:Complete this line
                    // 